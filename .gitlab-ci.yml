default:
  image: $CI_REGISTRY/arcus/common/images/base-images/runtime/integration_test:latest
variables:
  GIT_FETCH_EXTRA_FLAGS: --tags

stages:
  - generate-api
  - build
  - test
  - quality
  - release

generate-api:
  # cleaning worktree caused of release
  variables:
    GIT_STRATEGY: clone
  image: $CI_REGISTRY/arcus/common/images/base-images/pre_build/docker:latest
  stage: generate-api
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - export OPENAPIURL
    - export OPENAPIVOLUME
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - make generate-api-clients
    - docker logout $CI_REGISTRY
  artifacts:
    expire_in: 30 min
    paths:
      - openapi
  resource_group: $CI_COMMIT_BRANCH

build:cli:
  image: $CI_REGISTRY/arcus/common/images/base-images/buildtime/go:latest
  stage: build
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - export OPENAPIURL
    # Cntb required to run bat tests in next stage.
    - make build-only
  artifacts:
    expire_in: 30 min
    paths:
      - cntb
  resource_group: $CI_COMMIT_BRANCH

test:integration-test:
  stage: test
  variables:
    NODE_ENV: test
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - export API_ENDPOINT
    - export OAUTH2_CLIENT_SECRET
    - export OAUTH2_URL
    - export OAUTH2_USER_ID
    - export OAUTH2_PASS
    - export INT_ENVIRONMENT
    - bats -rt --timing bats/*.bats
  only:
    - dev
    - test
    - staging
    - prod
  resource_group: $CI_COMMIT_BRANCH

quality:sonar-qube:
  image: sonarsource/sonar-scanner-cli:latest
  stage: quality
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: 0
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  only:
    - dev
  resource_group: $CI_COMMIT_BRANCH

release:
  image: $CI_REGISTRY/arcus/common/images/base-images/buildtime/go:latest
  stage: release
  before_script:
    - TAG_VERSION=$(git rev-list --tags --max-count=1 | xargs -I {} git describe --tags {})
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - |
      rm -rf .git
      git clone https://root:$GITHUB_ACCESS_TOKEN@$GITHUB_REPO .tmp/
      cp -r .tmp/.git .
      rm -rf .tmp/
      export GITHUB_TOKEN=$GITHUB_ACCESS_TOKEN
      echo 'deciding if there were changes'
      if ! git diff-index --quiet HEAD --; then
        VERSION_BITS=(${TAG_VERSION//./ })
        VNUM1=${VERSION_BITS[0]}
        VNUM2=${VERSION_BITS[1]}
        VNUM3=${VERSION_BITS[2]}
        VNUM3=$((VNUM3+1))
        NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
        echo "Updating $TAG_VERSION to $NEW_TAG"
        git add --all
        git commit -m "release $NEW_TAG"
        git push https://root:$GITHUB_ACCESS_TOKEN@$GITHUB_REPO
        git tag $NEW_TAG
        goreleaser release --rm-dist --skip-announce
      else 
        echo "Nothing to release"
        exit 0
      fi
  only:
    - prod
