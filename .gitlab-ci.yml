default:
  image: $CI_REGISTRY/arcus/common/images/base-images/runtime/integration_test:latest
variables:
  GIT_FETCH_EXTRA_FLAGS: --tags
  GIT_STRATEGY: clone

stages:
  - generate-api
  - build
  - test
  - quality
  - release

generate-api:
  image: $CI_REGISTRY/arcus/common/images/base-images/pre_build/docker:latest
  stage: generate-api
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - export OPENAPIURL
    - export OPENAPIVOLUME
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - make generate-api-clients
    - docker logout $CI_REGISTRY
  artifacts:
    expire_in: 30 min
    paths:
      - openapi
  resource_group: $CI_COMMIT_BRANCH

build:cli:
  image: $CI_REGISTRY/arcus/common/images/base-images/buildtime/go:latest
  stage: build
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - export OPENAPIURL
    # Cntb required to run bat tests in next stage.
    - make build-only
  artifacts:
    expire_in: 30 min
    paths:
      - cntb
  resource_group: $CI_COMMIT_BRANCH

test:integration-test:
  stage: test
  variables:
    NODE_ENV: test
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    - export API_ENDPOINT
    - export OAUTH2_CLIENT_SECRET
    - export OAUTH2_URL
    - export OAUTH2_USER_ID
    - export OAUTH2_PASS
    - bats -rt --timing bats/*.bats
  only:
    - dev
    - test
    - staging
    - prod
  resource_group: $CI_COMMIT_BRANCH

quality:sonar-qube:
  image: sonarsource/sonar-scanner-cli:latest
  stage: quality
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: 0
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  only:
    - dev
  resource_group: $CI_COMMIT_BRANCH

release:
  image: $CI_REGISTRY/arcus/common/images/base-images/buildtime/go:latest
  stage: release
  before_script:
    - git config --global pager.branch false
    - git config --global pager.config false
    - git branch -r
    - git config --list
    - TAG_VERSION=$(git rev-list --tags --max-count=1 | xargs -I {} git describe --tags {})
    - COMMIT=$(git rev-list --tags --max-count=1)
    - echo "THIS IS COMMIT = $COMMIT"
    - echo "THIS IS TAG_VERSION = $TAG_VERSION"
    - git tag --list
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | tee /etc/apt/sources.list.d/goreleaser.list
    - apt update
    - apt install goreleaser
    - git rev-list -n 1 $TAG_VERSION
  script:
    - |
      rm -rf .git
      git clone https://root:$GITHUB_ACCESS_TOKEN@$GITHUB_REPO .tmp/
      cp -r .tmp/.git .
      rm -rf .tmp/
      export GITHUB_TOKEN=$GITHUB_ACCESS_TOKEN
      git diff-index --quiet HEAD || {
        git add --all
        git commit -m "release $TAG_VERSION"
        git push https://root:$GITHUB_ACCESS_TOKEN@$GITHUB_REPO
        echo "> release $TAG_VERSION" > notes.md
        git tag $TAG_VERSION
        goreleaser release --rm-dist --skip-announce --release-notes notes.md
        git clean
        git tag --list
      }
  only:
    - feature/AR-362-goreleaser
